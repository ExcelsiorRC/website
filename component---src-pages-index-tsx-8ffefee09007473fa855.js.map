{"version":3,"sources":["webpack://gatsby-blog-stater-with-typescript/./src/components/common/Toggler.tsx","webpack://gatsby-blog-stater-with-typescript/./src/components/common/Header.tsx","webpack://gatsby-blog-stater-with-typescript/./src/components/layout/index.tsx","webpack://gatsby-blog-stater-with-typescript/./src/constants/togglerType.ts","webpack://gatsby-blog-stater-with-typescript/./src/pages/index.tsx"],"names":["getDefaultColorMode","window","defaultColorMode","localStorage","getItem","COLOR","defaultMediaQuery","matchMedia","matches","useState","colorMode","setColorMode","useEffect","document","body","classList","add","className","type","onChange","toggledColor","toggle","setItem","checked","headerTitle","pathname","globalHistory","Link","to","location","children","title","useStaticQuery","site","siteMetadata","isRootPath","onClick","reload","rel","data-is-root-path","LOCAL_STORAGE_KEY","MEDIA_KEY","DARK_MODE","LIGHT_MODE","data"],"mappings":"yOAIaA,EAAsB,WACjC,GAAsB,oBAAXC,OAAwB,CACjC,IAAMC,EAAmBD,OAAOE,aAAaC,QAAQC,uBAErD,GAAgC,iBAArBH,EACT,OAAOA,EAGT,IAAMI,EAAoBL,OAAOM,WAAWF,eAE5C,GAAyC,kBAA9BC,EAAkBE,QAC3B,OAAOF,EAAkBE,QAAUH,cAAkBA,eAGzD,OAAOA,gBAuCT,EApCgB,WAAM,OACcI,cAAgBT,GAA3CU,EADa,KACFC,EADE,KAsBpB,OANAC,gBAAU,WACRF,IAAcL,cACVQ,SAASC,KAAKC,UAAUC,IAAIX,eAC5BQ,SAASC,KAAKC,UAAUC,IAAIX,kBAC/B,CAACK,IAGF,yBAAOO,UAAU,WACf,yBACEC,KAAK,WACLD,UAAU,mBACVE,SAxBqB,WACzB,IAAMC,EAAeV,IAAcL,cAAkBA,eAAmBA,cAExEQ,SAASC,KAAKC,UAAUM,OAAOhB,gBAC/BQ,SAASC,KAAKC,UAAUM,OAAOhB,eAET,oBAAXJ,QACTA,OAAOE,aAAamB,QAAQjB,sBAAyBe,GAGvDT,EAAaS,IAeTG,QAASb,IAAcL,gBAEzB,wBAAMY,UAAS,iCAAmCP,IAClD,wBAAMO,UAAS,6BAA+BP,GAAcA,KClBlE,MAxBA,YAA8C,IAA5Bc,EAA4B,EAA5BA,YACRC,EAAaC,kCAErB,OACE,0BAAQT,UAAU,eAChB,uBAAKA,UAAU,mBACb,sBAAIA,UAAU,gBAAgBO,GAC9B,uBAAKP,UAAU,6BACb,gBAAC,EAAD,MACA,gBAAC,EAAAU,KAAD,CAAMC,GAAG,KACP,sBAAIX,UAAwB,MAAbQ,EAAmB,SAAW,IAA7C,SAEF,gBAAC,EAAAE,KAAD,CAAMC,GAAG,SACP,sBAAIX,UAAwB,UAAbQ,EAAuB,SAAW,IAAjD,SAEF,gBAAC,EAAAE,KAAD,CAAMC,GAAG,UACP,sBAAIX,UAAwB,WAAbQ,EAAwB,SAAW,IAAlD,cC0BZ,EA9Ce,SAAC,GAA2B,MAarCD,EAbYK,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAWpBC,EAAK,WAVEC,oBAAe,cAUTC,KAAKC,oBAAb,aAAG,EAAwBH,MAIhCI,EADQ,MACKN,EAASJ,SAuB5B,OAlBED,EADEW,EAEA,uBAAKlB,UAAU,OAAOmB,QAJN,kBAAMnC,OAAO4B,SAASQ,WAKnCN,GAKH,gBAAC,EAAAJ,KAAD,CAAMC,GAAG,IAAIU,IAAI,cACdP,IAKPnB,gBAAU,WACR,IAAMV,EAAmBF,IACzBa,SAASC,KAAKC,UAAUC,IAAId,KAC3B,IAGD,uBAAKe,UAAU,iBAAiBsB,oBAAmBJ,GACjD,gBAAC,EAAD,CAAQX,YAAaA,IACrB,wBAAMP,UAAU,eAAea,M,kEC7C9B,IAAMzB,EAAQ,CACnBmC,kBAAmB,aACnBC,UAAW,+BACXC,UAAW,OACXC,WAAY,U,iECQd,UAN4B,SAAC,GAAD,EAAGC,KAAH,IAASf,EAAT,EAASA,SAAT,OAC1B,gBAAC,IAAD,CAAQA,SAAUA,GAChB","file":"component---src-pages-index-tsx-8ffefee09007473fa855.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../../styles/components/common/toggler.scss';\nimport { Color, COLOR } from '../../constants/togglerType';\n\nexport const getDefaultColorMode = (): Color => {\n  if (typeof window !== 'undefined') {\n    const defaultColorMode = window.localStorage.getItem(COLOR.LOCAL_STORAGE_KEY);\n\n    if (typeof defaultColorMode === 'string') {\n      return defaultColorMode as Color;\n    }\n\n    const defaultMediaQuery = window.matchMedia(COLOR.MEDIA_KEY);\n\n    if (typeof defaultMediaQuery.matches === 'boolean')\n      return defaultMediaQuery.matches ? COLOR.DARK_MODE : COLOR.LIGHT_MODE;\n  }\n\n  return COLOR.LIGHT_MODE;\n};\n\nconst Toggler = () => {\n  const [colorMode, setColorMode] = useState<Color>(getDefaultColorMode);\n\n  const toggleColorHandler = () => {\n    const toggledColor = colorMode === COLOR.DARK_MODE ? COLOR.LIGHT_MODE : COLOR.DARK_MODE;\n\n    document.body.classList.toggle(COLOR.LIGHT_MODE);\n    document.body.classList.toggle(COLOR.DARK_MODE);\n\n    if (typeof window !== 'undefined') {\n      window.localStorage.setItem(COLOR.LOCAL_STORAGE_KEY, toggledColor);\n    }\n\n    setColorMode(toggledColor);\n  };\n\n  useEffect(() => {\n    colorMode === COLOR.DARK_MODE\n      ? document.body.classList.add(COLOR.DARK_MODE)\n      : document.body.classList.add(COLOR.LIGHT_MODE);\n  }, [colorMode]);\n\n  return (\n    <label className=\"toggler\">\n      <input\n        type=\"checkbox\"\n        className=\"toggler-checkbox\"\n        onChange={toggleColorHandler}\n        checked={colorMode === COLOR.DARK_MODE}\n      />\n      <span className={`toggler-slider toggler-slider-${colorMode}`} />\n      <span className={`toggler-text toggler-text-${colorMode}`}>{colorMode}</span>\n    </label>\n  );\n};\n\nexport default Toggler;\n","import React from 'react';\nimport '../../styles/components/common/header.scss';\nimport { Link } from 'gatsby';\nimport { globalHistory } from '@reach/router';\nimport Toggler from './Toggler';\n\ninterface HeaderProps {\n  headerTitle: JSX.Element;\n}\n\nfunction Header({ headerTitle }: HeaderProps) {\n  const { pathname } = globalHistory.location;\n\n  return (\n    <header className=\"header-area\">\n      <div className=\"header-contents\">\n        <h2 className=\"header-title\">{headerTitle}</h2>\n        <div className=\"header-category-container\">\n          <Toggler />\n          <Link to=\"/\">\n            <h3 className={pathname === '/' ? 'active' : ''}>HOME</h3>\n          </Link>\n          <Link to=\"/blog\">\n            <h3 className={pathname === '/blog' ? 'active' : ''}>BLOG</h3>\n          </Link>\n          <Link to=\"/about\">\n            <h3 className={pathname === '/about' ? 'active' : ''}>ABOUT</h3>\n          </Link>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport Header from '../common/Header';\nimport { getDefaultColorMode } from '../common/Toggler';\nimport './index.scss';\n\nconst Layout = ({ location, children }) => {\n  const data = useStaticQuery(graphql`\n    query LayoutQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const title = data.site.siteMetadata?.title;\n\n  let headerTitle: JSX.Element;\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n\n  const reloadClick = () => window.location.reload();\n\n  if (isRootPath) {\n    headerTitle = (\n      <div className=\"logo\" onClick={reloadClick}>\n        {title}\n      </div>\n    );\n  } else {\n    headerTitle = (\n      <Link to=\"/\" rel=\"noreferrer\">\n        {title}\n      </Link>\n    );\n  }\n\n  useEffect(() => {\n    const defaultColorMode = getDefaultColorMode();\n    document.body.classList.add(defaultColorMode);\n  }, []);\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <Header headerTitle={headerTitle} />\n      <main className=\"global-main\">{children}</main>\n    </div>\n  );\n};\n\nexport default Layout;\n","export type Color = 'dark' | 'light';\n\nexport const COLOR = {\n  LOCAL_STORAGE_KEY: 'color-mode',\n  MEDIA_KEY: '(prefers-color-scheme: dark)',\n  DARK_MODE: 'dark' as Color,\n  LIGHT_MODE: 'light' as Color,\n};\n","import React, { FC } from 'react';\nimport Layout from '../components/layout';\n\ntype MainProps = {\n  data: any;\n  location: any;\n};\n\nconst Main: FC<MainProps> = ({ data, location }) => (\n  <Layout location={location}>\n    <h1>Hello World</h1>\n  </Layout>\n);\n\nexport default Main;\n"],"sourceRoot":""}